#[derive(Debug, Clone, Copy, PartialEq)]
pub enum Token<'a> {
    Ident(&'a str),

    Uint(u64),
    Int(i64),
    Float(f64),

    String(&'a str),
    Boolean(bool),

    Semicolon,
    Colon,
    Comma,
    Period,
    Hash,
    Equals,
    Bang,
    Ampersand,
    Pipe,
    Plus,
    PlusEquals,
    Minus,
    MinusEquals,
    Asterisk,
    AsteriskEquals,
    Slash,
    SlashEquals,
    Lt,
    Gt,
    LtEquals,
    GtEquals,
    DoubleEquals,
    NotEquals,
    DoubleAmpersand,
    DoublePipe,
    Arrow,

    ParenOpen,
    ParenClose,
    BracketOpen,
    BracketClose,
    BraceOpen,
    BraceClose,

    KeywordFn,
    KeywordLet,
    KeywordMut,
    KeywordType,
    KeywordIf,
    KeywordElse,
    KeywordWhile,
    KeywordFor,
    KeywordIn,
    KeywordMatch,
}

impl Token<'_> {
    pub fn name(&self) -> &'static str {
        match self {
            Token::Ident(_) => "an identifier",
            Token::Uint(_) => "an unsigned integer",
            Token::Int(_) => "an integer",
            Token::Float(_) => "a float",
            Token::String(_) => "a string",
            Token::Boolean(_) => "a boolean",
            Token::Semicolon => "a semicolon",
            Token::Colon => "a colon",
            Token::Comma => "a comma",
            Token::Period => "a period",
            Token::Hash => "a hash",
            Token::Equals => "an equal sign",
            Token::Bang => "an exclamation point",
            Token::Ampersand => "an ampersand",
            Token::Pipe => "a pipe",
            Token::Plus => "a plus sign",
            Token::PlusEquals => "a plus equals sign",
            Token::Minus => "a minus sign",
            Token::MinusEquals => "a minus equals sign",
            Token::Asterisk => "an asterisk",
            Token::AsteriskEquals => "a times equals sign",
            Token::Slash => "a foreward slash",
            Token::SlashEquals => "a slash equals sign",
            Token::Lt => "a less than sign",
            Token::Gt => "a greater than sign",
            Token::LtEquals => "a less than equals sign",
            Token::GtEquals => "a greater than equals sign",
            Token::DoubleEquals => "a double equal sign",
            Token::NotEquals => "an inequal sign",
            Token::DoubleAmpersand => "a double ampersand",
            Token::DoublePipe => "a double pipe",
            Token::Arrow => "an arrow",
            Token::ParenOpen => "a open parenthesis",
            Token::ParenClose => "a close parenthesis",
            Token::BracketOpen => "an open square bracket",
            Token::BracketClose => "a close square bracket",
            Token::BraceOpen => "an open curly brace",
            Token::BraceClose => "a close curly brace",
            Token::KeywordFn => "fn keyword",
            Token::KeywordLet => "let keyword",
            Token::KeywordMut => "mut keyword",
            Token::KeywordType => "type keyword",
            Token::KeywordIf => "the if keyword",
            Token::KeywordElse => "the else keyword",
            Token::KeywordWhile => "the while keyword",
            Token::KeywordFor => "the for keyword",
            Token::KeywordIn => "the in keyword",
            Token::KeywordMatch => "the match keyword",
        }
    }
}
